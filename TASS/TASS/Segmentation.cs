using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace TASS
{
    // This class will handle the segmentation aspect of the TASS
    class Segmentation
    {
        // Constructor only needs the matlab reference
        // Memory also will be allocated
        public Segmentation(MLApp.MLApp matlabRef)
        {
            matlab = matlabRef;
            skeletalActionUnits = new List<Double[,]>();
        }

        // Returns the Number of SAU's
        // Note the dimensionalities of the SAU's is stored in a text file generated by the TASS (matlab side)
        public void Execute(Double[,] SkeletonW)
        {
            object result = null;
            matlab.Feval("Segmentation", 2, out result, SkeletonW); //, "@FeetDistance", "@WalkingBackwardY");

            object[] res = result as object[];
            segmentationResult = res;
        }

        // Explicity convert the raw data to a typed C# friendly data
        // I.E. produce a list of the SAU matrices
        public void typeTheRawData()
        {
            object SkeletonS = segmentationResult[0];
            object[,] rawSAUArray = SkeletonS as object[,];

            object Seg = segmentationResult[1];
            segArray = (Double[,])Seg;

            for(int i = 0; i < rawSAUArray.Length; i++)
            {
                Double[,] tmp = (Double[,])rawSAUArray[0, i];
                skeletalActionUnits.Add(tmp);
            }
        }

        // Used for Debugging
        public void printSAUs()
        {
            foreach(Double[,] dl in skeletalActionUnits)
            {
                foreach(Double d in dl)
                {
                    Console.WriteLine(d.ToString());
                }
            }
        }
        
        public void printSAU(int which_sau)
        {
            foreach(Double d in skeletalActionUnits[which_sau])
            {
                Console.WriteLine(d);
            }
        }

        // Debugging Function - prints Seg
        public void printSeg()
        {
            foreach(Double d in segArray)
            {
                Console.WriteLine(d.ToString());
            }
        }

        // Getters
        public List<Double[,]> getSAUs() { return skeletalActionUnits; }
        public Double[,] getSeg() { return segArray; }
        public int getNumSAUs() { return skeletalActionUnits.Count; }

        // Raw Data
        private MLApp.MLApp matlab;                             // Matlab reference
        private object[] segmentationResult;                    // Raw Matlab Result

        // Typed Data
        private List<Double[,]> skeletalActionUnits;            // Acutal SAU's
        private Double[,] segArray;                             // Returned Seg
    }
}
